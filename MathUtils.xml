<?xml version="1.0" encoding="utf-8"?>
<!-- This file along with its dll needs to be installed to ...InstallDir...\RuntimeData\FormulaAddIn to run. -->
<FormulaAddIn>
  <Function>
    <Name>PHI</Name>
    <NumParams variable="false">0</NumParams>
    <Category>Math</Category>
    <Description>The Golden Ratio</Description>
    <InsertText>Phi()</InsertText>
    <Formula>(1 + SQRT(5)) / 2</Formula>
  </Function>
  <Function>
    <Name>MODULO</Name>
    <NumParams variable="false">2</NumParams>
    <Category>Math</Category>
    <InsertText>Modulo(Dividend, Divisor)</InsertText>
    <Description>Get Remainder of Division</Description>
    <Formula>IIF(ISNULL(P2) OR P2 = 0,NULL(),(P1/P2 - FLOOR(P1/P2)) * P2)</Formula>
  </Function>
  <Function>
    <Name>QUOTIENT</Name>
    <NumParams variable="false">2</NumParams>
    <Category>Math</Category>
    <InsertText>Quotient(Dividend, Divisor)</InsertText>
    <Description>Get integer portion of a division</Description>
    <Formula>IIF(ISNULL(P2) OR P2 = 0,NULL(),INT(P1/P2))</Formula>
  </Function>
  <Function>
    <Name>SIGN</Name>
    <NumParams variable="false">1</NumParams>
    <Category>Math</Category>
    <InsertText>Sign(Value)</InsertText>
    <Description>Get sign of a value</Description>
    <Formula>IIF(ISNULL(P1),NULL(),IIF(P1=0,0,IIF(P1&lt;0,-1,1)))</Formula>
  </Function>
  <Function>
    <Name>INT</Name>
    <NumParams variable="false">1</NumParams>
    <Category>Math</Category>
    <InsertText>Int(Value)</InsertText>
    <Description>Gets the integer closer to 0</Description>
    <Formula>IIF(ISNULL(P1),NULL(),IIF(P1&lt;0,-FLOOR(-P1),FLOOR(P1)))</Formula>
  </Function>
  <Function>
    <Name>HEXBINX</Name>
    <NumParams variable="true">2</NumParams>
    <Category>Spatial</Category>
    <InsertText>HexBinX(X, Y, R)</InsertText>
    <Description>Get HexBin X Co-Ordindate of Point</Description>
    <Dll>
      <Name>AlteryxAbacus.dll</Name>
      <EntryPoint>HexBinX</EntryPoint>
    </Dll>
  </Function>
  <Function>
    <Name>HEXBINY</Name>
    <NumParams variable="true">2</NumParams>
    <Category>Spatial</Category>
    <InsertText>HexBinY(X, Y, R)</InsertText>
    <Description>Get HexBin Y Co-Ordindate of Point</Description>
    <Dll>
      <Name>AlteryxAbacus.dll</Name>
      <EntryPoint>HexBinY</EntryPoint>
    </Dll>
  </Function>
  <Function>
    <Name>RANDTRIANGULAR</Name>
    <NumParams variable="false">4</NumParams>
    <Category>Math</Category>
    <InsertText>RandTriangular(Prob, Min, Mode, Max)</InsertText>
    <Description>Get A Triangular Distributed Random Number</Description>
    <Formula>
        IIF(P1 &lt; 0 OR P1 &gt; 1, NULL(),
        IIF(P1 &lt;= ((P3 - P2) / (P4 - P2)), 
            P2 + SQRT(P1 * (P4 - P2) * (P3 - P2)), 
            P4 - SQRT((1 - P1) * (P4 - P2) * (P4 - P3))))
    </Formula>
  </Function>
  <Function>
    <Name>AVG</Name>
    <NumParams variable="true">2</NumParams>
    <Category>Math</Category>
    <InsertText>Avg(Value1, Value2, ...)</InsertText>
    <Description>Average Ignoring Nulls</Description>
    <Dll>
      <Name>AlteryxAbacus.dll</Name>
      <EntryPoint>Avg</EntryPoint>
    </Dll>
  </Function>
  <Function>
    <Name>SUM</Name>
    <NumParams variable="true">2</NumParams>
    <Category>Math</Category>
    <InsertText>Sum(Val1, Val, ... )</InsertText>
    <Description>Sum Ignoring Nulls</Description>
    <Dll>
      <Name>AlteryxAbacus.dll</Name>
      <EntryPoint>Sum</EntryPoint>
    </Dll>
  </Function>
  <Function>
    <Name>COUNT</Name>
    <NumParams variable="true">2</NumParams>
    <Category>Math</Category>
    <InsertText>Count(Value1, Value2, ...)</InsertText>
    <Description>Count not null values</Description>
    <Dll>
      <Name>AlteryxAbacus.dll</Name>
      <EntryPoint>Count</EntryPoint>
    </Dll>
  </Function>
  <Function>
    <Name>DEG</Name>
    <NumParams variable="false">1</NumParams>
    <Category>Math</Category>
    <InsertText>Deg(Radians)</InsertText>
    <Description>Get Radians in Degrees</Description>
    <Formula>P1*180/PI()</Formula>
  </Function>
  <Function>
    <Name>RAD</Name>
    <NumParams variable="false">1</NumParams>
    <Category>Math</Category>
    <InsertText>Rad(Degrees)</InsertText>
    <Description>Get Degrees in Radians</Description>
    <Formula>P1/180*PI()</Formula>
  </Function>
  <Function>
    <Name>NORMDIST</Name>
    <NumParams variable="true">1</NumParams>
    <Category>Math</Category>
    <InsertText>NormDist(X, Mean, StDev, Cuml)</InsertText>
    <Description>Normal Distribution PDF or CDF Value. If omitted: Mean = 0, StDev = 1, Cuml = 0 (pdf)</Description>
    <Dll>
      <Name>AlteryxAbacus.dll</Name>
      <EntryPoint>NormDist</EntryPoint>
    </Dll>
  </Function>
  <Function>
    <Name>NORMINV</Name>
    <NumParams variable="true">1</NumParams>
    <Category>Math</Category>
    <InsertText>NormInv(P, Mean, StDev)</InsertText>
    <Description>Normal Distribution Inverse CDF Function</Description>
    <Dll>
      <Name>AlteryxAbacus.dll</Name>
      <EntryPoint>NormInv</EntryPoint>
    </Dll>
  </Function>
  <Function>
    <Name>LOGNORMDIST</Name>
    <NumParams variable="true">1</NumParams>
    <Category>Math</Category>
    <InsertText>LogNormDist(X, Location, Scale, Cuml)</InsertText>
    <Description>Log Normal Distribution PDF or CDF Value. If omitted: Location = 0, Scale = 1, Cuml = 0 (pdf)</Description>
    <Dll>
      <Name>AlteryxAbacus.dll</Name>
      <EntryPoint>LogNormDist</EntryPoint>
    </Dll>
  </Function>
  <Function>
    <Name>LOGNORMINV</Name>
    <NumParams variable="true">1</NumParams>
    <Category>Math</Category>
    <InsertText>LogNormInv(P, Location, Scale)</InsertText>
    <Description>Log Normal Distribution Inverse CDF Function. If omitted: Location = 0, Scale = 1</Description>
    <Dll>
      <Name>AlteryxAbacus.dll</Name>
      <EntryPoint>LogNormInv</EntryPoint>
    </Dll>
  </Function>
  <Function>
    <Name>TDIST</Name>
    <NumParams variable="false">2</NumParams>
    <Category>Math</Category>
    <InsertText>TDist(X, DegreesOfFreedom)</InsertText>
    <Description>Returns the two-tailed Student's t-distribution</Description>
    <Dll>
      <Name>AlteryxAbacus.dll</Name>
      <EntryPoint>TDist</EntryPoint>
    </Dll>
  </Function>
  <Function>
    <Name>TINV</Name>
    <NumParams variable="false">2</NumParams>
    <Category>Math</Category>
    <InsertText>TInv(P, DegreesOfFreedom)</InsertText>
    <Description>Returns the two-tailed inverse of the Student's t-distribution</Description>
    <Dll>
      <Name>AlteryxAbacus.dll</Name>
      <EntryPoint>TInv</EntryPoint>
    </Dll>
  </Function>
  <Function>
    <Name>CHIDIST</Name>
    <NumParams variable="false">2</NumParams>
    <Category>Math</Category>
    <InsertText>ChiDist(X, DegreesOfFreedom)</InsertText>
    <Description>Returns the right-tailed probability of the chi-squared distribution</Description>
    <Dll>
      <Name>AlteryxAbacus.dll</Name>
      <EntryPoint>ChiDist</EntryPoint>
    </Dll>
  </Function>
  <Function>
    <Name>CHIINV</Name>
    <NumParams variable="false">2</NumParams>
    <Category>Math</Category>
    <InsertText>ChiInv(P, DegreesOfFreedom)</InsertText>
    <Description>Returns the inverse of the right-tailed probability of the chi-squared distribution</Description>
    <Dll>
      <Name>AlteryxAbacus.dll</Name>
      <EntryPoint>ChiInv</EntryPoint>
    </Dll>
  </Function>
  <Function>
    <Name>GAMMADIST</Name>
    <NumParams variable="true">2</NumParams>
    <Category>Math</Category>
    <InsertText>GammaDist(X, Shape, Scale, Cuml)</InsertText>
    <Description>Gamma Distribution PDF or CDF Value. If omitted: Scale = 1, Cuml = 0 (pdf)</Description>
    <Dll>
      <Name>AlteryxAbacus.dll</Name>
      <EntryPoint>GammaDist</EntryPoint>
    </Dll>
  </Function>
  <Function>
    <Name>GAMMAINV</Name>
    <NumParams variable="true">2</NumParams>
    <Category>Math</Category>
    <InsertText>GammaInv(P, Shape, Scale)</InsertText>
    <Description>Gamma Distribution Inverse CDF Function. If omitted: Scale = 1</Description>
    <Dll>
      <Name>AlteryxAbacus.dll</Name>
      <EntryPoint>GammaInv</EntryPoint>
    </Dll>
  </Function>
  <Function>
    <Name>POISSONDIST</Name>
    <NumParams variable="true">2</NumParams>
    <Category>Math</Category>
    <InsertText>PoissonDist(X, Mean, Cuml)</InsertText>
    <Description>Poisson Distribution PDF or CDF Value. If omitted: Cuml = 0 (pdf)</Description>
    <Dll>
      <Name>AlteryxAbacus.dll</Name>
      <EntryPoint>PoissonDist</EntryPoint>
    </Dll>
  </Function>
  <Function>
    <Name>POISSONINV</Name>
    <NumParams variable="false">2</NumParams>
    <Category>Math</Category>
    <InsertText>PoissonInv(P, Mean)</InsertText>
    <Description>Poisson Distribution Inverse CDF Function</Description>
    <Dll>
      <Name>AlteryxAbacus.dll</Name>
      <EntryPoint>PoissonInv</EntryPoint>
    </Dll>
  </Function>
  <Function>
    <Name>INT64ADD</Name>
    <NumParams variable="true">2</NumParams>
    <Category>Math</Category>
    <InsertText>Int64Add(A, B, ...)</InsertText>
    <Description>Adds integers stored as strings using Int64 Maths</Description>
    <Dll>
      <Name>AlteryxAbacus.dll</Name>
      <EntryPoint>Int64Add</EntryPoint>
    </Dll>
  </Function>
  <Function>
    <Name>INT64MULT</Name>
    <NumParams variable="true">2</NumParams>
    <Category>Math</Category>
    <InsertText>Int64Mult(A, B, ...)</InsertText>
    <Description>Products integers stored as strings using Int64 Maths</Description>
    <Dll>
      <Name>AlteryxAbacus.dll</Name>
      <EntryPoint>Int64Mult</EntryPoint>
    </Dll>
  </Function>
  <Function>
    <Name>INT64DIV</Name>
    <NumParams variable="false">2</NumParams>
    <Category>Math</Category>
    <InsertText>Int64Div(A, B)</InsertText>
    <Description>Divides integers stored as strings using Int64 Maths</Description>
    <Dll>
      <Name>AlteryxAbacus.dll</Name>
      <EntryPoint>Int64Div</EntryPoint>
    </Dll>
  </Function>
  <Function>
    <Name>INT64MOD</Name>
    <NumParams variable="false">2</NumParams>
    <Category>Math</Category>
    <InsertText>Int64Mod(A, B)</InsertText>
    <Description>Mod integers stored as strings using Int64 Maths</Description>
    <Dll>
      <Name>AlteryxAbacus.dll</Name>
      <EntryPoint>Int64Mod</EntryPoint>
    </Dll>
  </Function>
</FormulaAddIn>
